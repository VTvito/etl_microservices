services:
  postgres:
    image: postgres:latest
    container_name: postgres
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    ports:
      - "5432:5432"
    volumes:
      - etl-postgres-data:/var/lib/postgresql/data
    networks:
      - etl-network

  # per il monitoraggio in Prometheus
  postgres-exporter:
    image: quay.io/prometheuscommunity/postgres-exporter:latest
    container_name: postgres-exporter
    environment:
      DATA_SOURCE_NAME: postgres://airflow:airflow@postgres:5432/airflow?sslmode=disable
    ports:
      - "9187:9187"
    networks:
      - etl-network
    restart: always

  airflow:
    build:
      context: ./airflow
      dockerfile: Dockerfile
    container_name: airflow
    depends_on:
    - postgres
    volumes:
      - etl-containers-shared-data:/app/data         # Volume condiviso fra i container per i dati
      - etl-data-airflow:/opt/airflow                # Volume per la persistenza dei dati di Airflow
    ports:
      - "8080:8080"
    networks:
      - etl-network
    restart: always

# monitoraggio microservizi
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    volumes:
      - etl-prometheus-data:/etc/prometheus                         # Volume
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml  # Montaggio Folder su Volume
    ports:
      - "9090:9090"
    networks:
      - etl-network
    restart: always

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - etl-grafana-data:/var/lib/grafana
    ports:
      - "3000:3000"
    networks:
      - etl-network
    restart: always

# microservizi
  read-csv-service:
    build:
      context: ./read-csv-service
      dockerfile: Dockerfile
    container_name: read-csv-service
    volumes:
      - etl-containers-shared-data:/app/data
    expose:
      - "5001"
    ports:
      - "5001:5001"
    networks:
      - etl-network
    restart: always

  clean-nan-csv-service:
    build:
      context: ./clean-nan-csv-service
      dockerfile: Dockerfile
    container_name: clean-nan-csv-service
    volumes:
      - etl-containers-shared-data:/app/data
    expose:
      - "5002"
    ports:
      - "5002:5002"
    networks:
      - etl-network
    restart: always

  get-columns-csv-service:
    build:
      context: ./get-columns-csv-service
      dockerfile: Dockerfile
    container_name: get-columns-csv-service
    volumes:
      - etl-containers-shared-data:/app/data
    expose:
      - "5003"
    ports:
      - "5003:5003"
    networks:
      - etl-network
    restart: always

  delete-columns-csv-service:
    build:
      context: ./delete-columns-csv-service
      dockerfile: Dockerfile
    container_name: delete-columns-csv-service
    volumes:
      - etl-containers-shared-data:/app/data
    expose:
      - "5004"
    ports:
      - "5004:5004"
    networks:
      - etl-network
    restart: always  

networks:
  etl-network:
    driver: bridge

volumes:
  etl-containers-shared-data:
  etl-postgres-data:
  etl-data-airflow:
  etl-grafana-data:
  etl-prometheus-data: